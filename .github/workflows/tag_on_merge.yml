name: Tag on merge

on:
  pull_request:
    types:
      - closed

jobs:
  create_tag_and_draft_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Draft Release
        id: create_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            if (context.payload.pull_request.merged) {
              const { owner, repo } = context.repo
              const prNumber = context.payload.pull_request.number
              const labels = (await github.issues.listLabelsOnIssue({ owner, repo, issue_number: prNumber })).data.map(label => label.name)

              const lastTag = (await github.repos.listTags({ owner, repo })).data.map(tag => tag.name).sort().pop()
              const baseString = lastTag.match(/[\d.]+$/)[0]
              const prefix = lastTag.replace(baseString, '')
              const parts = baseString.split('.').map(Number)

              if (labels.includes('enhancement')) {
                parts[1] += 1
                parts[2] = 0
              } else if (labels.includes('bug') || labels.includes('documentation')) {
                parts[2] += 1
              } else {
                return
              }

              const newTag = `${prefix}${parts.join('.')}`
              const tagRef = await github.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${newTag}`,
                sha: context.payload.pull_request.merge_commit_sha,
              })
              const release = await github.repos.createRelease({
                owner,
                repo,
                tag_name: newTag,
                name: newTag,
                draft: true,
                prerelease: false,
              })
            }

  publish_release:
    needs: create_tag_and_draft_release
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            const releases = await github.repos.listReleases({
              owner,
              repo,
            })
            const draftRelease = releases.data.find(release => release.draft) // Encontra a release mais recente que Ã© um rascunho
            if (draftRelease) {
              await github.repos.updateRelease({
                owner,
                repo,
                release_id: draftRelease.id,
                draft: false, // Remove o status de rascunho
              })
            }

  build-min-js:
    needs: publish_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Create package.json
        run: |
          echo '{
            "name": "my-project",
            "version": "1.0.0",
            "description": "",
            "main": "index.js",
            "scripts": {
              "test": "echo \"Error: no test specified\" && exit 1"
            },
            "keywords": [],
            "author": "",
            "license": "ISC",
            "dependencies": {
              "terser": "^5.7.2"
            }
          }' > package.json
      - name: Install Dependencies npm
        run: npm install

      - name: Install Dependencies
        run: npm ci

      - name: Create dist directory
        run: mkdir -p dist

      - name: Get Tag Name
        id: get_tag
        run: |
          TAG_NAME=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" -H "Authorization: Bearer ${{ secrets.TOKEN_ACTIONS }}" | jq -r '.tag_name')
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Minify JavaScript
        run: |
          npx terser src/customComponents.js -o dist/customComponents-${{ env.TAG_NAME }}.min.js

      - name: Checkout main branch
        run: git checkout main

      - name: Commit and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add dist/*
          git commit -m "Minify JavaScript files" -a
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTIONS }}

      - name: Get Release ID
        id: get_release
        run: |
          RELEASE_ID=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" -H "Authorization: Bearer ${{ secrets.TOKEN_ACTIONS }}" | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets{?name,label}
          asset_path: dist/customComponents-${{ env.TAG_NAME }}.min.js
          asset_name: customComponents-${{ env.TAG_NAME }}.min.js
          asset_content_type: application/javascript
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTIONS }}
